Las funciones pueden ser declaras despues de su uso ya que en la fase de compilación suben hacia arriba.

Al cargar la pagina se ejecuta todo el codigo, por lo que si ponemos botones y codigo despues se ejecutara el codigo, incluso si el boton tiene un codigo.

Si usamos documten.write al terminar de cargarse la pagina sobreescribe todo el documento


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script>
    // Definir una función que se ejecutará al cargar la página
    function miFuncionAlCargar() {
      document.write("La página se ha cargado completamente. Puedes ejecutar acciones adicionales aquí.");
    }

    // Asignar la función al evento 'load' del objeto 'window'
    window.onload = miFuncionAlCargar;
  </script>
</head>
<body>
  <!-- Contenido de la página -->
  <h1>hola</h1>
</body>
</html>

---------------------------------------------------------------------------
Se puede escribir codigo en los on click.

---------------------------------------------------------------------------
setTimeOut(funcion sin (), 1000);1 segundo
setInterval(funcion sin (), 1000);1 segundo


---------------------------------------------------------------------------------------

Los valores más comunes de nodeType son:

1: Elemento (Node.ELEMENT_NODE)
2: Atributo (Node.ATTRIBUTE_NODE)
3: Texto (Node.TEXT_NODE)
8: Comentario (Node.COMMENT_NODE)
9: Documento (Node.DOCUMENT_NODE)
11: Fragmento de Documento (Node.DOCUMENT_FRAGMENT_NODE)

-----------------------------------------------------------------------------------
se usa value para elementos de tipo input, select, textarea
se usa textContent para los demas tipos de elemento de tipo texto


-------------------------TECNICA PARA NO TENER QUE ESCRBIR ABAJO DEL BODY--------
window.onload = function() {
  document.getElementById("pulsar").onclick = muestraMensaje;
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ offsetparent@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Sí, también puedes usar la propiedad offsetParent para acceder al elemento padre del elemento que desencadenó el evento. La diferencia principal entre parentNode y offsetParent radica en cómo manejan los elementos posicionados.

La propiedad parentNode simplemente te devuelve el nodo padre del elemento, independientemente de cómo estén posicionados los elementos en el DOM.

Por otro lado, la propiedad offsetParent devuelve el elemento padre más cercano que tiene una posición distinta de static. Esto significa que offsetParent te dará el primer ancestro que establece un contexto de posicionamiento para el elemento, como un elemento con posición relative, absolute o fixed.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ PARA ENVENTLSITENER SIN THIS @@@@@@@@@@@@@@@@@@@@@@@
<body>
    <button id="myButton">Haz clic aquí</button>

    <script>
        document.getElementById("myButton").addEventListener("click", function() {
            console.log("Elemento que disparó el evento:", this);
        });
    </script>
</body>